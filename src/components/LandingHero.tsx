import { useRef, Suspense } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { useGLTF, Stage, Grid, OrbitControls, Environment } from '@react-three/drei'
import { EffectComposer, Bloom, ToneMapping } from '@react-three/postprocessing'
import { easing } from 'maath'

interface LandingHeroProps {
  onGetStarted: () => void
}

export default function LandingHero({ onGetStarted }: LandingHeroProps) {
  return (
    <div className="relative w-screen h-screen bg-black overflow-hidden">
      {/* 3D Scene */}
      <div className="absolute inset-0">
        <Canvas flat shadows camera={{ position: [-15, 0, 10], fov: 25 }}>
          <fog attach="fog" args={['black', 15, 22.5]} />
          <Stage intensity={0.5} environment="city" shadows={{ type: 'accumulative', bias: -0.001, intensity: Math.PI }} adjustCamera={false}>
            <Suspense fallback={<FallbackModel />}>
              <Kamdo rotation={[0, Math.PI, 0]} />
            </Suspense>
          </Stage>
          <Grid renderOrder={-1} position={[0, -1.85, 0]} infiniteGrid cellSize={0.6} cellThickness={0.6} sectionSize={3.3} sectionThickness={1.5} sectionColor="#0080ff" fadeDistance={30} />
          <OrbitControls autoRotate autoRotateSpeed={0.05} enableZoom={false} makeDefault minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} />
          <EffectComposer enableNormalPass={false}>
            <Bloom luminanceThreshold={2} mipmapBlur />
            <ToneMapping />
          </EffectComposer>
          <Environment background preset="sunset" blur={0.8} />
        </Canvas>
      </div>

      {/* UI Overlay */}
      <div className="relative z-10 flex items-center justify-center h-full">
        <div className="text-center max-w-4xl mx-auto px-6">
          {/* Main Title */}
          <h1 className="text-5xl md:text-7xl font-bold mb-6">
            <span className="bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
              3D Conversation
            </span>
            <br />
            <span className="bg-gradient-to-r from-pink-400 via-red-400 to-orange-400 bg-clip-text text-transparent">
              Visualizer
            </span>
          </h1>

          {/* Subtitle */}
          <p className="text-xl md:text-2xl text-slate-300 mb-8 max-w-2xl mx-auto leading-relaxed">
            Transform your ChatGPT conversations into stunning 3D word clouds. 
            Explore the most frequent words in an immersive visual experience.
          </p>

          {/* CTA Button */}
          <button
            onClick={onGetStarted}
            className="group relative px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white font-bold text-lg rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
          >
            <span className="relative z-10">Get Started</span>
            <div className="absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-400 rounded-xl blur opacity-0 group-hover:opacity-30 transition-opacity duration-300"></div>
          </button>

          {/* Features */}
          <div className="mt-16 grid grid-cols-1 md:grid-cols-3 gap-8 text-slate-300">
            <div className="bg-slate-800/30 backdrop-blur-md p-6 rounded-xl border border-slate-600">
              <div className="text-blue-400 text-2xl mb-3">ðŸŽ¨</div>
              <h3 className="font-semibold mb-2">Beautiful 3D Visualization</h3>
              <p className="text-sm">Interactive word clouds with stunning visual effects</p>
            </div>
            
            <div className="bg-slate-800/30 backdrop-blur-md p-6 rounded-xl border border-slate-600">
              <div className="text-purple-400 text-2xl mb-3">ðŸ“Š</div>
              <h3 className="font-semibold mb-2">Smart Analysis</h3>
              <p className="text-sm">Analyze word frequency and conversation patterns</p>
            </div>
            
            <div className="bg-slate-800/30 backdrop-blur-md p-6 rounded-xl border border-slate-600">
              <div className="text-pink-400 text-2xl mb-3">âš¡</div>
              <h3 className="font-semibold mb-2">Real-time Interaction</h3>
              <p className="text-sm">Click, drag, and explore your conversations</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.0 s2wt_kamdo_industrial_divinities.glb --transform --simplify
Author: Hansalex (https://sketchfab.com/Hansalex)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/s2wt-kamdo-industrial-divinities-f503b70ac05e49a38c81100d71599a1b
Title: S2WT "Kamdo" (Industrial Divinities)
*/

// Fallback component when model is loading or not available
function FallbackModel() {
  const meshRef = useRef<any>(null)
  
  useFrame((state) => {
    if (meshRef.current) {
      meshRef.current.rotation.y = Math.sin(state.clock.elapsedTime) * 0.2
    }
  })
  
  return (
    <group>
      <mesh ref={meshRef} castShadow receiveShadow>
        <boxGeometry args={[1, 2, 1]} />
        <meshStandardMaterial color="#444" metalness={0.8} roughness={0.2} />
      </mesh>
      <mesh position={[0, 1.2, 0]} castShadow receiveShadow>
        <sphereGeometry args={[0.4]} />
        <meshStandardMaterial color="#666" metalness={0.6} roughness={0.3} />
      </mesh>
      <pointLight intensity={2} color={[0.5, 0.5, 10]} distance={3} />
    </group>
  )
}

function Kamdo(props: any) {
  const head = useRef<any>(null)
  const stripe = useRef<any>(null)
  const light = useRef<any>(null)
  
  const { nodes, materials } = useGLTF('/s2wt_kamdo_industrial_divinities-transformed.glb')
  
  useFrame((state, delta) => {
    const t = (1 + Math.sin(state.clock.elapsedTime * 2)) / 2
    if (stripe.current) {
      stripe.current.color.setRGB(2 + t * 20, 2, 20 + t * 50)
    }
    if (head.current && easing.dampE) {
      easing.dampE(head.current.rotation, [0, state.pointer.x * (state.camera.position.z > 1 ? 1 : -1), 0], 0.4, delta)
    }
    if (light.current) {
      light.current.intensity = 1 + t * 4
    }
  })
  
  return (
    <group {...props}>
      <mesh castShadow receiveShadow geometry={(nodes as any)?.body001?.geometry} material={(materials as any)?.Body} />
      <group ref={head}>
        <mesh castShadow receiveShadow geometry={(nodes as any)?.head001?.geometry} material={(materials as any)?.Head} />
        <mesh castShadow receiveShadow geometry={(nodes as any)?.stripe001?.geometry}>
          <meshBasicMaterial ref={stripe} toneMapped={false} />
          <pointLight ref={light} intensity={1} color={[10, 2, 5]} distance={2.5} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/models/s2wt_kamdo_industrial_divinities-transformed.glb')
